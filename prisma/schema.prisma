generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  surname       String
  number        String
  password      String
  operatorsId   String?    @db.ObjectId
  operator      Operators? @relation(fields: [operatorsId], references: [id], onDelete: Cascade)
  roleId        String?    @db.ObjectId
  role          UserRoles? @relation(fields: [roleId], references: [id], onDelete: Cascade)
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  company       String?
  description   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Session       Session[]
}

model UserRoles {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  roleName    String   @unique
  users       Users[]
  permissions String[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Verification {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  email              String   @unique
  verificationCode   String
  verificationExpiry DateTime
  name               String?
  surname            String?
  password           String?
  company            String?
  description        String?
  number             String?
  operatorsId        String?  @db.ObjectId
  resetPasswordToken String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Customers {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  email                   String?
  name                    String?
  number                  String                    @unique
  language                Languages                 @default(en)
  createdAt               DateTime
  conversations           Conversations[]
  tickets                 Tickets[]
  transactions            Transactions[]
  passengers              Passenger[]
  CustomerLocationHistory CustomerLocationHistory[]
}

model Passenger {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  passportNumber String?
  customerId     String    @db.ObjectId
  customer       Customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
  @@unique([customerId, name])
}


model CustomerLocationHistory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  code       String
  countryId  String    @db.ObjectId
  customerId String    @db.ObjectId
  customer   Customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Operators {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  setting      Settings[]
  users        Users[]
  discounts    Discounts[]
  transactions Transactions[]
  routes       Routes[]
  busses       Busses[]
}

model Busses {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  tickets      Tickets[]
  operatorIds  String[]  @db.ObjectId
  operators    Operators @relation(fields: [operatorIds], references: [id], onDelete: Cascade)
  name         String
  busID        String
  registration String
  capacity     Int
  class        BusClass
  homeBase     String
  driverName   String
  comments     String
}

model Routes {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  tickets           Tickets[]
  type              RouteType
  days              DAYS
  departureLocation Location
  arrivalLocation   Location
  departureTime     DateTime
  arrivalTime       DateTime
  stops             RouteStops
  pricing           RoutePricing
  operatorIds       String[]     @db.ObjectId
  operators         Operators    @relation(fields: [operatorIds], references: [id], onDelete: Cascade)
}

model Transactions {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  tickets          Tickets[]
  customerId       String    @db.ObjectId
  customer         Customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
  operatorIds      String[]  @db.ObjectId
  operators        Operators @relation(fields: [operatorIds], references: [id], onDelete: Cascade)
  paymentMethod    String
  paymentRef       String    @unique
  paidAt           DateTime  @default(now())
  totalAmount      Float
  currency         String
  paymentReference Json
  isDeleted        Boolean   @default(false)
}


model Tickets {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  ticketId         String             @unique
  busId            String?            @db.ObjectId
  bus              Busses?            @relation(fields: [busId], references: [id], onDelete: Cascade)
  conversationId   String             @db.ObjectId
  discountId       String?            @db.ObjectId
  discount         Discounts?         @relation(fields: [discountId], references: [id], onDelete: Cascade)
  routeId          String?            @db.ObjectId
  route            Routes?            @relation(fields: [routeId], references: [id], onDelete: Cascade)
  carmaDetails     CarmaRouteDetails?
  transactionId    String?            @db.ObjectId
  transaction      Transactions?      @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  customerId       String             @db.ObjectId
  customer         Customers          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  sourceCityId     String             @db.ObjectId
  sourceCity       Cities             @relation("SourceCityTickets", fields: [sourceCityId], references: [id])
  arrivalCityId    String             @db.ObjectId
  arrivalCity      Cities             @relation("ArrivalCityTickets", fields: [arrivalCityId], references: [id])
  priceDetails     TicketPriceDetails
  departureTime    DateTime
  passengerDetails Json
  arrivalTime      DateTime
  paymentMethod    String
  paymentSecret    String
  isDeleted        Boolean
  seats            String
  reservedAt       DateTime
  confirmedAt      DateTime?
  cancelledAt      DateTime?
  status           TicketStatus
  busIdentifier    String
  source           TicketSources
}

model Discounts {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  operatorIds     String[]       @db.ObjectId
  operators       Operators      @relation(fields: [operatorIds], references: [id], onDelete: Cascade)
  departureCityId String         @db.ObjectId
  departureCity   Cities         @relation("departureCityDiscount", fields: [departureCityId], references: [id], onDelete: Cascade)
  arrivalCityId   String         @db.ObjectId
  arrivalCity     Cities         @relation("arrivalCityDiscount", fields: [arrivalCityId], references: [id], onDelete: Cascade)
  source          TicketSources?
  maxUseCount     Int?
  expiryDate      DateTime?
  tickets         Tickets[]
  isDeleted       Boolean
}

model Settings {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  key         String
  value       Json
  operatorsId String    @db.ObjectId
  operator    Operators @relation(fields: [operatorsId], references: [id], onDelete: Cascade)
}

model Conversations {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  lastMessageTime DateTime
  messages        Messages[]
  customerId      String             @db.ObjectId
  customer        Customers          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  botStateId      String?            @db.ObjectId
  botState        BotStates?         @relation(fields: [botStateId], references: [id], onDelete: Cascade)
  status          ConversationStatus
  bookingDetails  Json?
  createdAt       DateTime
  completedAt     DateTime?
}

model BotStates {
  id                       String            @id @default(auto()) @map("_id") @db.ObjectId
  friendlyName             String            
  text                     Json?
  contentTemplateIds       Json?
  preMsgFunction           String?
  postMsgFunction          String?
  nextStateFunction        String?
  nextStateConfig          NextStateConfig[]
  conversations            Conversations[]
  firstState               Boolean
  firstStateNewCustomer    Boolean
  isFinalState             Boolean
  isContentTemplateMessage Boolean
  waitForMessageToProceed  Boolean
  isDeleted                Boolean           @default(false)
}

model Cities {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  code               String
  countryId          String      @db.ObjectId
  country            Countries   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  isPopular          Boolean     @default(false)
  departureDiscounts Discounts[] @relation("departureCityDiscount")
  arrivalDiscounts   Discounts[] @relation("arrivalCityDiscount")
  sourceTickets      Tickets[]   @relation("SourceCityTickets")
  arrivalTickets     Tickets[]   @relation("ArrivalCityTickets")
}

model Countries {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  cities Cities[]
}

model FAQs {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        Json
  description Json
  response    Json
  enabled     Boolean @default(true)
}


type NextStateConfig {
  nextStateId String   @db.ObjectId
  value       String[]
}

type Messages {
  body         String
  to           String
  number       String
  date         DateTime
  from         MessageFrom
  platform     Platform
  originalData Json
}

type TicketPriceDetails {
  totalPrice                Float
  kupiProfit                Float
  carmaProfit               Float
  kupiMarkup                Float
  kupiCommissionPercentage  Float @default(8)
  carmaCommissionPercentage Float @default(2)
  kupiMarkupPercentage      Float @default(0)
}

type CarmaRouteDetails {
  selectedAvailability      Json
}

type RoutePricing {
  amoutUSD          Float
  amountLocal       Float
  departureLocation Location
  arrivalLocation   Location
}

type RouteStops {
  location      Location
  arrivalTime   DateTime
  departureTime DateTime
}

type Location {
  stationName   String
  streetAddress String
  suburb        String
  cityId        String @db.ObjectId
  countryId     String @db.ObjectId
  geoLocation   String
}

enum RouteType {
  WEEKLY
  DAILY
}

enum Platform {
  TWILIO
}

enum ConversationStatus {
  IN_PROGRESS
  COMPLETED
}

enum TicketStatus {
  RESERVED
  CONFIRMED
  CANCELED
}

enum DAYS {
  SUN
  MON
  TUE
  WED
  THR
  FRI
  SAT
}

enum MessageFrom {
  CUSTOMER
  BOT
}

enum TicketSources {
  CARMA
  KUPI
}

enum BusClass {
  STANDARD
  LUXURY
}



enum Languages {
  en
  sn
  nd
}